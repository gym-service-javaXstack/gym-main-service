#LOGGING CONFIGURATION
logging:
  pattern:
    console: "%clr(%d{${LOG_DATEFORMAT:yyy-MM-dd'T'HH:mm:ss.SSSXXX}}){faint} %clr(${LOG_LEVEL_PATTERN:%5p}) %clr(${PID:- }){magenta} %clr(---){faint} %clr([%15.15t]){faint} %clr(%-40.40logger{39}){cyan} %clr(:){faint} %X{correlationId:- } %X{txId:- } %msg%n"
  level:
    root: INFO
  file:
    path: ./logs/gym-service/dev

#SPRING CONFIGURATION
spring:
  sql:
    init:
      mode: always # This setting tells Spring Boot to execute SQL scripts every time the application starts, regardless of whether tables exist or not.
  jpa:
    defer-datasource-initialization: true # This is useful when you need to execute data.sql after creating tables using schema.sql or Hibernate.ddl
    properties:
      hibernate:
        hbm2ddl:
          auto: update
        format_sql: true
        use_sql_comments: true
        show_sql: true
  datasource:
    url: jdbc:postgresql://${DB_HOST:localhost}:5432/gymDB-dev
    username: postgres
    password: postgres
    driver-class-name: org.postgresql.Driver
  data:
    redis:
      url: redis://redis:6379
      username: default
      password: redis
      repositories:
        enabled: false

#SPRING-DOC SWAGGER CONFIGURATION
springdoc:
  swagger-ui:
    url: /swagger-config.yml
    enabled: true

#ACTUATOR CONFIGURATION
management:
  endpoint:
    health:
      show-details: always
  endpoints:
    web:
      exposure:
        include: '*'

#JWT
token:
  signing:
    key: thisIsASecretKeyWith64CharactersthisIsASecretKeyWith64Characters
  expiration:
    minutes: 5

##BRUTEFORCE
bruteforce:
  max-attempts: 3
  block-duration-minutes: 5